// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: record.proto
// Protobuf C++ Version: 6.33.0

#include "record.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr Record::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        legaladress_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        companyname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        foundationyear_{0},
        occupation_{0},
        foreigneconomicactivity_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Record::Record(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Record_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordDefaultTypeInternal() {}
  union {
    Record _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordDefaultTypeInternal _Record_default_instance_;
static constexpr const ::_pb::EnumDescriptor* PROTOBUF_NONNULL* PROTOBUF_NULLABLE
    file_level_enum_descriptors_record_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor* PROTOBUF_NONNULL* PROTOBUF_NULLABLE
    file_level_service_descriptors_record_2eproto = nullptr;
const ::uint32_t
    TableStruct_record_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::Record, _impl_._has_bits_),
        8, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::Record, _impl_.foundationyear_),
        PROTOBUF_FIELD_OFFSET(::Record, _impl_.legaladress_),
        PROTOBUF_FIELD_OFFSET(::Record, _impl_.companyname_),
        PROTOBUF_FIELD_OFFSET(::Record, _impl_.occupation_),
        PROTOBUF_FIELD_OFFSET(::Record, _impl_.foreigneconomicactivity_),
        2,
        0,
        1,
        3,
        4,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::Record)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::_Record_default_instance_._instance,
};
const char descriptor_table_protodef_record_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\014record.proto\"\177\n\006Record\022\026\n\016foundationYe"
    "ar\030\001 \002(\005\022\023\n\013legalAdress\030\002 \002(\t\022\023\n\013Company"
    "Name\030\003 \002(\t\022\022\n\noccupation\030\004 \001(\005\022\037\n\027foreig"
    "nEconomicActivity\030\005 \001(\005"
};
static ::absl::once_flag descriptor_table_record_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_record_2eproto = {
    false,
    false,
    143,
    descriptor_table_protodef_record_2eproto,
    "record.proto",
    &descriptor_table_record_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_record_2eproto::offsets,
    file_level_enum_descriptors_record_2eproto,
    file_level_service_descriptors_record_2eproto,
};
// ===================================================================

class Record::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<Record>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Record, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

Record::Record(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Record_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Record)
}
PROTOBUF_NDEBUG_INLINE Record::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::Record& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        legaladress_(arena, from.legaladress_),
        companyname_(arena, from.companyname_) {}

Record::Record(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const Record& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Record_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Record* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char*>(&_impl_) +
               offsetof(Impl_, foundationyear_),
           reinterpret_cast<const char*>(&from._impl_) +
               offsetof(Impl_, foundationyear_),
           offsetof(Impl_, foreigneconomicactivity_) -
               offsetof(Impl_, foundationyear_) +
               sizeof(Impl_::foreigneconomicactivity_));

  // @@protoc_insertion_point(copy_constructor:Record)
}
PROTOBUF_NDEBUG_INLINE Record::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        legaladress_(arena),
        companyname_(arena) {}

inline void Record::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char*>(&_impl_) +
               offsetof(Impl_, foundationyear_),
           0,
           offsetof(Impl_, foreigneconomicactivity_) -
               offsetof(Impl_, foundationyear_) +
               sizeof(Impl_::foreigneconomicactivity_));
}
Record::~Record() {
  // @@protoc_insertion_point(destructor:Record)
  SharedDtor(*this);
}
inline void Record::SharedDtor(MessageLite& self) {
  Record& this_ = static_cast<Record&>(self);
  if constexpr (::_pbi::DebugHardenCheckHasBitConsistency()) {
    this_.CheckHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.legaladress_.Destroy();
  this_._impl_.companyname_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Record::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Record(arena);
}
constexpr auto Record::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Record),
                                            alignof(Record));
}
constexpr auto Record::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Record_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          Record::IsInitializedImpl,
          &Record::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Record>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Record::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Record>(), &Record::ByteSizeLong,
              &Record::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Record, _impl_._cached_size_),
          false,
      },
      &Record::kDescriptorMethods,
      &descriptor_table_record_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull Record_class_data_ =
        Record::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
Record::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Record_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Record_class_data_.tc_table);
  return Record_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2>
Record::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Record, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Record_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Record>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required int32 foundationYear = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Record, _impl_.foundationyear_), 2>(),
     {8, 2, 0,
      PROTOBUF_FIELD_OFFSET(Record, _impl_.foundationyear_)}},
    // required string legalAdress = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0,
      PROTOBUF_FIELD_OFFSET(Record, _impl_.legaladress_)}},
    // required string CompanyName = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 1, 0,
      PROTOBUF_FIELD_OFFSET(Record, _impl_.companyname_)}},
    // optional int32 occupation = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Record, _impl_.occupation_), 3>(),
     {32, 3, 0,
      PROTOBUF_FIELD_OFFSET(Record, _impl_.occupation_)}},
    // optional int32 foreignEconomicActivity = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Record, _impl_.foreigneconomicactivity_), 4>(),
     {40, 4, 0,
      PROTOBUF_FIELD_OFFSET(Record, _impl_.foreigneconomicactivity_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required int32 foundationYear = 1;
    {PROTOBUF_FIELD_OFFSET(Record, _impl_.foundationyear_), _Internal::kHasBitsOffset + 2, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // required string legalAdress = 2;
    {PROTOBUF_FIELD_OFFSET(Record, _impl_.legaladress_), _Internal::kHasBitsOffset + 0, 0, (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // required string CompanyName = 3;
    {PROTOBUF_FIELD_OFFSET(Record, _impl_.companyname_), _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional int32 occupation = 4;
    {PROTOBUF_FIELD_OFFSET(Record, _impl_.occupation_), _Internal::kHasBitsOffset + 3, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 foreignEconomicActivity = 5;
    {PROTOBUF_FIELD_OFFSET(Record, _impl_.foreigneconomicactivity_), _Internal::kHasBitsOffset + 4, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:Record)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (BatchCheckHasBit(cached_has_bits, 0x00000003U)) {
    if (CheckHasBit(cached_has_bits, 0x00000001U)) {
      _impl_.legaladress_.ClearNonDefaultToEmpty();
    }
    if (CheckHasBit(cached_has_bits, 0x00000002U)) {
      _impl_.companyname_.ClearNonDefaultToEmpty();
    }
  }
  if (BatchCheckHasBit(cached_has_bits, 0x0000001cU)) {
    ::memset(&_impl_.foundationyear_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.foreigneconomicactivity_) -
        reinterpret_cast<char*>(&_impl_.foundationyear_)) + sizeof(_impl_.foreigneconomicactivity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL Record::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Record& this_ = static_cast<const Record&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Record::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Record& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenCheckHasBitConsistency()) {
    this_.CheckHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:Record)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // required int32 foundationYear = 1;
  if (CheckHasBit(cached_has_bits, 0x00000004U)) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
            stream, this_._internal_foundationyear(), target);
  }

  // required string legalAdress = 2;
  if (CheckHasBit(cached_has_bits, 0x00000001U)) {
    const ::std::string& _s = this_._internal_legaladress();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // required string CompanyName = 3;
  if (CheckHasBit(cached_has_bits, 0x00000002U)) {
    const ::std::string& _s = this_._internal_companyname();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional int32 occupation = 4;
  if (CheckHasBit(cached_has_bits, 0x00000008U)) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
            stream, this_._internal_occupation(), target);
  }

  // optional int32 foreignEconomicActivity = 5;
  if (CheckHasBit(cached_has_bits, 0x00000010U)) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<5>(
            stream, this_._internal_foreigneconomicactivity(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Record)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Record::ByteSizeLong(const MessageLite& base) {
  const Record& this_ = static_cast<const Record&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t Record::ByteSizeLong() const {
  const Record& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:Record)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if (BatchCheckHasBit(cached_has_bits, 0x00000007U)) {
    // required string legalAdress = 2;
    if (CheckHasBit(cached_has_bits, 0x00000001U)) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_legaladress());
    }
    // required string CompanyName = 3;
    if (CheckHasBit(cached_has_bits, 0x00000002U)) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_companyname());
    }
    // required int32 foundationYear = 1;
    if (CheckHasBit(cached_has_bits, 0x00000004U)) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_foundationyear());
    }
  }
  if (BatchCheckHasBit(cached_has_bits, 0x00000018U)) {
    // optional int32 occupation = 4;
    if (CheckHasBit(cached_has_bits, 0x00000008U)) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_occupation());
    }
    // optional int32 foreignEconomicActivity = 5;
    if (CheckHasBit(cached_has_bits, 0x00000010U)) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_foreigneconomicactivity());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void Record::MergeImpl(::google::protobuf::MessageLite& to_msg,
                            const ::google::protobuf::MessageLite& from_msg) {
   auto* const _this =
      static_cast<Record*>(&to_msg);
  auto& from = static_cast<const Record&>(from_msg);
  if constexpr (::_pbi::DebugHardenCheckHasBitConsistency()) {
    from.CheckHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:Record)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (BatchCheckHasBit(cached_has_bits, 0x0000001fU)) {
    if (CheckHasBit(cached_has_bits, 0x00000001U)) {
      _this->_internal_set_legaladress(from._internal_legaladress());
    }
    if (CheckHasBit(cached_has_bits, 0x00000002U)) {
      _this->_internal_set_companyname(from._internal_companyname());
    }
    if (CheckHasBit(cached_has_bits, 0x00000004U)) {
      _this->_impl_.foundationyear_ = from._impl_.foundationyear_;
    }
    if (CheckHasBit(cached_has_bits, 0x00000008U)) {
      _this->_impl_.occupation_ = from._impl_.occupation_;
    }
    if (CheckHasBit(cached_has_bits, 0x00000010U)) {
      _this->_impl_.foreigneconomicactivity_ = from._impl_.foreigneconomicactivity_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}

void Record::CopyFrom(const Record& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Record::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const Record&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void Record::InternalSwap(Record* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.legaladress_, &other->_impl_.legaladress_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.companyname_, &other->_impl_.companyname_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Record, _impl_.foreigneconomicactivity_)
      + sizeof(Record::_impl_.foreigneconomicactivity_)
      - PROTOBUF_FIELD_OFFSET(Record, _impl_.foundationyear_)>(
          reinterpret_cast<char*>(&_impl_.foundationyear_),
          reinterpret_cast<char*>(&other->_impl_.foundationyear_));
}

::google::protobuf::Metadata Record::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_record_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
